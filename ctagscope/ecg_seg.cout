cscope 15 $HOME/Documents/SelfStudy/Code/Code_Of_Android_ECG_SEG -q 0000000376 0000046446
	@inc/ecg_seg_def.h

1 #i‚de‡
__ECG_SEG_DEF_H__


2 
	#__ECG_SEG_DEF_H__


	)

4 
	#ECG_SEG_ENCODER_CONVRELU_1_K_L
 (9)

	)

5 
	#ECG_SEG_ENCODER_CONVRELU_1_K_C
 (4)

	)

6 
	#ECG_SEG_ENCODER_CONVRELU_1_K_DUMMING_PADDING
 (4)

	)

7 
	#ECG_SEG_ENCODER_CONVRELU_1_K_DUMMING_STRIDE
 (1)

	)

9 
	#ECG_TEST_SIGNAL_ORI_C
 (1)

	)

10 
	#ECG_TEST_SIGNAL_ORI_L
 (2000)

	)

11 
	#ECG_TEST_SIGNAL_K_L
 (9)

	)

12 
	#ECG_TEST_SIGNAL_PADDING
 (4)

	)

13 
	#ECG_TEST_SIGNAL_STRIDE
 (1)

	)

14 
	#ECG_TEST_SIGNAL_MAX_OUT_L
 (2000)

	)

15 
	#ECG_TEST_SIGNAL_MAX_K_L
 (9)

	)

17 
	#ECG_TINY_TEST_SIGNAL_ORI_C
 (1)

	)

18 
	#ECG_TINY_TEST_SIGNAL_ORI_L
 (9)

	)

19 
	#ECG_TINY_TEST_SIGNAL_K_L
 (9)

	)

20 
	#ECG_TINY_TEST_SIGNAL_PADDING
 (4)

	)

21 
	#ECG_TINY_TEST_SIGNAL_STRIDE
 (1)

	)

22 
	#ECG_TINY_TEST_SIGNAL_MAX_OUT_L
 (9)

	)

23 
	#ECG_TINY_TEST_SIGNAL_MAX_K_L
 (9)

	)

25 
	#ECG_SIGNAL_ORI_C
 (
ECG_TINY_TEST_SIGNAL_ORI_C
)

	)

26 
	#ECG_SIGNAL_ORI_L
 (
ECG_TINY_TEST_SIGNAL_ORI_L
)

	)

27 
	#ECG_SIGNAL_K_L
 (
ECG_TINY_TEST_SIGNAL_K_L
)

	)

28 
	#ECG_SIGNAL_PADDING
 (
ECG_TINY_TEST_SIGNAL_PADDING
)

	)

29 
	#ECG_SIGNAL_STRIDE
 (
ECG_TINY_TEST_SIGNAL_STRIDE
)

	)

31 
	#ECG_SIGNAL_MID1_ORI_C
 (4)

	)

32 
	#ECG_SIGNAL_MID1_ORI_L
 (
ECG_TINY_TEST_SIGNAL_ORI_L
)

	)

33 
	#ECG_SIGNAL_MID1_K_L
 (
ECG_TINY_TEST_SIGNAL_K_L
)

	)

34 
	#ECG_SIGNAL_MID1_PADDING
 (
ECG_TINY_TEST_SIGNAL_PADDING
)

	)

35 
	#ECG_SIGNAL_MID1_STRIDE
 (
ECG_TINY_TEST_SIGNAL_STRIDE
)

	)

36 
	#ECG_SIGNAL_MID1_MAX_C
 (12)

	)

38 
	#ECG_SIG2COL_MAX_OUT_L
 (
ECG_TINY_TEST_SIGNAL_MAX_OUT_L
)

	)

39 
	#ECG_SIG2COL_MAX_K_L
 (
ECG_TINY_TEST_SIGNAL_MAX_K_L
)

	)

	@inc/ecg_seg_gemm.h

1 #i‚de‡
__ECG_SEG_GEMM_H__


2 
	#__ECG_SEG_GEMM_H__


	)

3 
	~<°döt.h
>

5 
	~"¨m_utû.h
"

6 
	~"¨m_ty≥def.h
"

7 
	~"ecg_£g_sig2cﬁ.h
"

8 
	~"ecg_£g_sig«l.h
"

10 #ifde‡
EN_GEMM_DBG


11 
	#GEMM_FUNC_ENTRANCE
 
FUNC_ENTRANCE_LOG


	)

12 
	#GEMM_FUNC_EXIT
 
FUNC_EXIT_LOG


	)

13 
	#GEMM_PRINTF
(
x
...Ë
	`ªe_¥ötf
(
LOG_DEBUG
, x)

	)

14 
	#GEMM_LOG
 
LOG_DEBUG


	)

16 
	#GEMM_FUNC_ENTRANCE
 dÿ{} 0)

	)

17 
	#GEMM_FUNC_EXIT
 dÿ{} 0)

	)

18 
	#GEMM_PRINTF
(
x
...Ëdÿ{} 0)

	)

19 
	#GEMM_LOG
 
LOG_VERBOSE


	)

22 
öt32_t
 
ecg_£g_Â_gemm
(
m©_sig_t
 *
p_c⁄v_weight
,

23 
sig2cﬁ_˘r_t
 *
p_sig_˘r
,

24 
m©_sig_t
 *
p_out_„©uª
);

26 
öt32_t
 
ecg_£g_Â_add_büs
(
m©_sig_t
 *
p_out_„©uª
,

27 
büs
,

28 
BOOL
 
fu£d_ªlu
);

	@inc/ecg_seg_graph.h

	@inc/ecg_seg_matrix.h

1 #i‚de‡
__ECG_SEG_MATRIX_H__


2 
	#__ECG_SEG_MATRIX_H__


	)

3 
	~<°döt.h
>

5 
	~"¨m_utû.h
"

6 
	~"¨m_ty≥def.h
"

8 #ifde‡
MATRIX_DBG


9 
	#MATRIX_FUNC_ENTRANCE
 
FUNC_ENTRANCE_LOG


	)

10 
	#MATRIX_FUNC_EXIT
 
FUNC_EXIT_LOG


	)

11 
	#MATRIX_PRINTF
(
x
...Ë
	`ªe_¥ötf
(
LOG_DEBUG
, x)

	)

12 
	#MATRIX_LOG
 
LOG_DEBUG


	)

14 
	#MATRIX_FUNC_ENTRANCE
 dÿ{} 0)

	)

15 
	#MATRIX_FUNC_EXIT
 dÿ{} 0)

	)

16 
	#MATRIX_PRINTF
(
x
...Ëdÿ{} 0)

	)

17 
	#MATRIX_LOG
 
LOG_VERBOSE


	)

20 
	#FP_PACK_SIZE_H
 (2)

	)

21 
	#FP_PACK_SIZE_W
 (4)

	)

22 
	#FP_PACK_ELE
 (16)

	)

24 
	#ELE_U8_SIZE
 (
uöt8_t
)

	)

25 
	#ELE_U16_SIZE
 (
uöt16_t
)

	)

26 
	#ELE_U32_SIZE
 (
uöt32_t
)

	)

27 
	#ELE_FP_SIZE
 ()

	)

29 
	eö_fûe_ty≥
 {

30 
	mIN_FILE_U8
 = 0,

31 
	mIN_FILE_U16
 = 1,

32 
	mIN_FILE_U32
 = 2,

33 
	mIN_FILE_FP
 = 3,

34 } 
	tö_fûe_ty≥_t
;

36 
	em©_ty≥
 {

37 
	mMAT_U8
 = 0,

38 
	mMAT_U16
 = 1,

39 
	mMAT_U32
 = 2,

40 
	mMAT_FP
 = 3,

41 } 
	tm©_ty≥_t
;

43 
	e∑ck_m©
 {

44 
	mPACK_MAT_ORI
 = 0,

45 
	mPACK_MAT_COL
 = 1,

46 } 
	t∑ck_m©_t
;

48 
	sm©_sig_∑ø
 {

49 
uöt32_t
 
	m‹i_l
;

50 
uöt32_t
 
	mk_l
;

51 
uöt32_t
 
	m∑ddög
;

52 
uöt32_t
 
	m°ride
;

53 } 
	tm©_sig_∑ø_t
;

55 
	sm©_sig
 {

56 
uöt32_t
 
	m‹i_l
;

57 
uöt32_t
 
	mout_l
;

58 
uöt32_t
 
	mcﬁ_h
;

59 
uöt32_t
 
	mcﬁ_w
;

60 
uöt32_t
 
	m∑ck_w_°ï
;

61 
uöt32_t
 
	m∑ck_h
;

62 
uöt32_t
 
	m∑ck_w
;

63 
uöt32_t
 
	m∑ck_ñe
;

64 
uöt32_t
 
	m∑ddög
;

65 
uöt32_t
 
	m°ride
;

66 
uöt32_t
 
	mÆloc_cﬁ
;

67 *
	m‹i_buf
;

68 } 
	tm©_sig_t
;

70 
öt32_t
 
m©_sig_c⁄°ru˘‹_Â_°
(
m©_sig_∑ø_t
 *
p_∑øm
,

71 
m©_sig_t
 *
p_m©
);

73 
¥öt_m©_‹i_Â
(
m©_sig_t
 *
p_m©
);

75 
öt32_t
 
m©_sig_c⁄°ru˘‹_Â_f›í
(
m©_sig_∑ø_t
 *
p_∑øm
,

76 
m©_sig_t
 *
p_m©
,

77 *
∑th
,

78 
BOOL
 
kî√l
);

80 
öt32_t
 
m©_sig_c⁄°ru˘‹_Â
(
m©_sig_∑ø_t
 *
p_∑øm
,

81 
m©_sig_t
 *
p_m©
,

82 
BOOL
 
kî√l
);

84 
m©_sig_de°ru˘‹
(
m©_sig_t
 *
p_m©
);

	@inc/ecg_seg_model.h

1 #i‚de‡
__ECG_SEG_MODEL_H__


2 
	#__ECG_SEG_MODEL_H__


	)

4 
	~<°döt.h
>

6 
	~"¨m_utû.h
"

7 
	~"¨m_ty≥def.h
"

8 
	~"ecg_£g_m©rix.h
"

9 
	~"ecg_£g_sig«l.h
"

10 
	~"ecg_£g_sig2cﬁ.h
"

12 #ifde‡
MODEL_DBG


13 
	#MODEL_FUNC_ENTRANCE
 
FUNC_ENTRANCE_LOG


	)

14 
	#MODEL_FUNC_EXIT
 
FUNC_EXIT_LOG


	)

15 
	#MODEL_PRINTF
(
x
...Ë
	`ªe_¥ötf
(
LOG_DEBUG
, x)

	)

16 
	#MODEL_LOG
 
LOG_DEBUG


	)

18 
	#MODEL_FUNC_ENTRANCE
 dÿ{} 0)

	)

19 
	#MODEL_FUNC_EXIT
 dÿ{} 0)

	)

20 
	#MODEL_PRINTF
(
x
...Ëdÿ{} 0)

	)

21 
	#MODEL_LOG
 
LOG_VERBOSE


	)

24 
	#UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT0
 "./modñ_weight/u√t_ícodî1_c⁄v1d_block_1_c⁄v_weight0.bö"

	)

25 
	#UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT1
 "./modñ_weight/u√t_ícodî1_c⁄v1d_block_1_c⁄v_weight1.bö"

	)

26 
	#UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT2
 "./modñ_weight/u√t_ícodî1_c⁄v1d_block_1_c⁄v_weight2.bö"

	)

27 
	#UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT3
 "./modñ_weight/u√t_ícodî1_c⁄v1d_block_1_c⁄v_weight3.bö"

	)

28 
	#UNET_ENCODER1_CONV1D_BLOCK_1_CONV_BIAS
 "./modñ_weight/u√t_ícodî1_c⁄v1d_block_1_c⁄v_büs.bö"

	)

30 
	sc⁄v_fu£_ªlu


32 
uöt32_t
 
	mc⁄v_fu£_ªlu_c
;

33 
m©_sig_∑ø_t
 
	mweight_∑ø
;

34 
m©_sig_t
 
	mc⁄v_weight
[4];

35 
	mc⁄v_büs
[4];

36 } 
	tc⁄v_fu£_ªlu_t
;

38 
öt32_t
 
c⁄v_fu£_ªlu_c⁄°ru˘‹_f›í
(
m©_sig_∑ø_t
 *
p_∑ø
,

39 
c⁄v_fu£_ªlu_t
 **
µ_moduÀ
,

40 *
weight_∑th0
,

41 *
weight_∑th1
,

42 *
weight_∑th2
,

43 *
weight_∑th3
,

44 *
büs_∑th
);

46 
öt32_t
 
c⁄v_fu£_ªlu_f‹w¨d
(
c⁄v_fu£_ªlu_t
 *
p_moduÀ
,

47 
sig2cﬁ_˘r_t
 *
p_cﬁ_˘r
,

48 
sig«l_c⁄èöî_t
 *
p_ö_sig_c⁄
,

49 
sig«l_c⁄èöî_t
 *
p_out_sig_c⁄
,

50 
uöt32_t
 
öput_num
,

51 
uöt32_t
 
ö_sig2cﬁ_num
,

52 
uöt32_t
 
ouçut_num
);

54 
c⁄v_fu£_ªlu_de°ru˘‹
(
c⁄v_fu£_ªlu_t
 *
p_moduÀ
);

	@inc/ecg_seg_sig2col.h

1 #i‚de‡
__ECG_SEG_SIG2COL_H__


2 
	#__ECG_SEG_SIG2COL_H__


	)

3 
	~<°döt.h
>

4 
	~<limôs.h
>

5 
	~"¨m_ty≥def.h
"

6 
	~"¨m_utû.h
"

7 
	~"ecg_£g_m©rix.h
"

8 
	~"ecg_ª•⁄£_def.h
"

9 
	~"ecg_£g_utû.h
"

11 #ifde‡
EN_SIG2COL_DBG


12 
	#SIG2COL_FUNC_ENTRANCE
 
FUNC_ENTRANCE_LOG


	)

13 
	#SIG2COL_FUNC_EXIT
 
FUNC_EXIT_LOG


	)

14 
	#SIG2COL_PRINTF
(
x
...Ë
	`ªe_¥ötf
(
LOG_DEBUG
, x)

	)

15 
	#SIG2COL_LOG
 
LOG_DEBUG


	)

17 
	#SIG2COL_FUNC_ENTRANCE
 dÿ{} 0)

	)

18 
	#SIG2COL_FUNC_EXIT
 dÿ{} 0)

	)

19 
	#SIG2COL_PRINTF
(
x
...Ëdÿ{} 0)

	)

20 
	#SIG2COL_LOG
 
LOG_VERBOSE


	)

23 
	#SIG2COL_INVALID_IND
 (
INT_MIN
)

	)

25 
	ssig2cﬁ_˘r
 {

26 
uöt32_t
 
	mcur_out_l
;

27 
uöt32_t
 
	mcur_out_∑ck_l
;

28 
uöt32_t
 
	mcur_k_l
;

29 
uöt32_t
 
	mcur_ñe_num
;

30 
uöt32_t
 
	mmax_out_l
;

31 
uöt32_t
 
	mmax_out_∑ck_l
;

32 
uöt32_t
 
	mmax_k_l
;

33 
uöt32_t
 
	mmax_ñe_num
;

34 *
	mcﬁ_buf
;

35 } 
	tsig2cﬁ_˘r_t
;

37 
öt32_t
 
sig2cﬁ_˘r_Â_c⁄°ru˘‹
(
uöt32_t
 
max_out_l
, uöt32_à
max_k_l
, 
sig2cﬁ_˘r_t
 **
µ_˘r
);

38 
öt32_t
 
sig2cﬁ_m©_Â
(
sig2cﬁ_˘r_t
 *
p_˘r
, 
m©_sig_t
 *
p_m©
);

39 
sig2cﬁ_¥ötf_m©_Â
(
sig2cﬁ_˘r_t
 *
p_˘r
);

40 
sig2cﬁ_˘r_de°ru˘‹
(
sig2cﬁ_˘r_t
 *
p_˘r
);

	@inc/ecg_seg_signal.h

1 #i‚de‡
__ECG_SEG_SIGNAL_H__


2 
	#__ECG_SEG_SIGNAL_H__


	)

4 
	~<°döt.h
>

6 
	~"¨m_utû.h
"

7 
	~"¨m_ty≥def.h
"

8 
	~"ecg_£g_m©rix.h
"

10 #ifde‡
SIGNAL_DBG


11 
	#SIGNAL_FUNC_ENTRANCE
 
FUNC_ENTRANCE_LOG


	)

12 
	#SIGNAL_FUNC_EXIT
 
FUNC_EXIT_LOG


	)

13 
	#SIGNAL_PRINTF
(
x
...Ë
	`ªe_¥ötf
(
LOG_DEBUG
, x)

	)

14 
	#SIGNAL_LOG
 
LOG_DEBUG


	)

16 
	#SIGNAL_FUNC_ENTRANCE
 dÿ{} 0)

	)

17 
	#SIGNAL_FUNC_EXIT
 dÿ{} 0)

	)

18 
	#SIGNAL_PRINTF
(
x
...Ëdÿ{} 0)

	)

19 
	#SIGNAL_LOG
 
LOG_VERBOSE


	)

22 
	#ECG_SIGNAL
 "./d©a/ã°_sig«l.bö"

	)

23 
	#ECG_TINY_SIGNAL
 "./d©a/ã°_töy_sig«l.bö"

	)

25 
	ssig«l_c⁄èöî
 {

26 
uöt32_t
 
	msig«l_num
;

27 
m©_sig_∑ø_t
 
	msig«l_∑ø
;

28 
m©_sig_t
 *
	msig«l
;

29 } 
	tsig«l_c⁄èöî_t
;

31 
öt32_t
 
sig«l_c⁄èöî_c⁄°ru˘‹_Â_f›í
(
uöt32_t
 
sig«l_num
,

32 
m©_sig_∑ø_t
 *
p_∑ø
,

33 
sig«l_c⁄èöî_t
 **
µ_c⁄èöî
,

34 **
sig«l_∑th
);

36 
öt32_t
 
sig«l_c⁄èöî_c⁄°ru˘‹
(
uöt32_t
 
sig«l_num
,

37 
m©_sig_∑ø_t
 *
p_∑ø
,

38 
sig«l_c⁄èöî_t
 **
µ_c⁄èöî
);

40 
sig«l_c⁄èöî_de°ru˘‹
(
sig«l_c⁄èöî_t
 *
p_c⁄èöî
);

	@src/ecg_seg_gemm.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<¨m_√⁄.h
>

7 
	~"¨m_utû.h
"

8 
	~"¨m_ty≥def.h
"

9 
	~"ecg_£g_gemm.h
"

10 
	~"ecg_ª•⁄£_def.h
"

11 
	~"ecg_£g_sig2cﬁ.h
"

12 
	~"ecg_£g_sig«l.h
"

14 
öt32_t
 
	$ecg_£g_Â_gemm
(
m©_sig_t
 *
p_c⁄v_weight
,

15 
sig2cﬁ_˘r_t
 *
p_sig_˘r
,

16 
m©_sig_t
 *
p_out_„©uª
)

18 
GEMM_FUNC_ENTRANCE
;

19 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

20 
uöt32_t
 
h_°ïs
 = 0, 
w_°ïs
 = 0, 
ªmaö_h_num
 = 0;

21 
uöt32_t
 
w_off£t
 = 0;

22 *
p_weight
 = 
NULL
, *
p_sig1
 = NULL, *
p_sig2
 = NULL, *
p_„©
 = NULL;

23 
Êﬂt32x2_t
 
vec_weight
;

24 
Êﬂt32x4_t
 
vec_ö_„©uª1
, 
vec_ö_„©uª2
;

25 
Êﬂt32x4_t
 
vec_out_„©uª
;

26 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_c⁄v_weight
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_ECG_SEG_FP_GEMM
,

27 "%†occur†îr‹ duêtÿp_c⁄v_weighài†NULL", 
__func__
);

28 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_sig_˘r
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_ECG_SEG_FP_GEMM
,

29 "%†occur†îr‹ duêtÿp_sig_˘∏i†NULL", 
__func__
);

30 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_out_„©uª
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_ECG_SEG_FP_GEMM
,

31 "%†occur†îr‹ duêtÿp_out_„©uª i†NULL", 
__func__
);

32 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_c⁄v_weight
->
‹i_buf
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_ECG_SEG_FP_GEMM
,

33 "%†occur†îr‹ duêtÿp_c⁄v_weight->‹i_bu‡i†NULL", 
__func__
);

34 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_sig_˘r
->
cﬁ_buf
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_ECG_SEG_FP_GEMM
,

35 "%†occur†îr‹ duêtÿp_sig_˘r->cﬁ_bu‡i†NULL", 
__func__
);

36 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_out_„©uª
->
‹i_buf
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_ECG_SEG_FP_GEMM
,

37 "%†occur†îr‹ duêtÿp_out_„©uª->‹i_bu‡i†NULL", 
__func__
);

38 
	`ªe_log
(
GEMM_LOG
, "%†p_c⁄v_weight->‹i_»%dÖ_sig_˘r->cur_k_»%d", 
__func__
,

39 
p_c⁄v_weight
->
‹i_l
,

40 
p_sig_˘r
->
cur_k_l
);

41 
	`ªe_log
(
GEMM_LOG
, "%†p_sig_˘r->cur_out_∑ck_»%dÖ_out_„©uª->∑ck_w %d", 
__func__
,

42 
p_sig_˘r
->
cur_out_∑ck_l
,

43 
p_out_„©uª
->
∑ck_w
);

44 
	`ªe_log
(
GEMM_LOG
, "%†p_sig_˘r->cur_out_»%dÖ_out_„©uª->‹i_»%d", 
__func__
,

45 
p_sig_˘r
->
cur_out_l
,

46 
p_out_„©uª
->
‹i_l
);

47 
h_°ïs
 = 
p_c⁄v_weight
->
‹i_l
 / 
FP_PACK_SIZE_H
;

48 
w_°ïs
 = 
p_sig_˘r
->
cur_out_∑ck_l
 / 
FP_PACK_SIZE_W
;

49 
ªmaö_h_num
 = 
p_c⁄v_weight
->
‹i_l
 - 
h_°ïs
*
FP_PACK_SIZE_H
;

50 
w_off£t
 = 
w_°ïs
*
FP_PACK_SIZE_W
;

51 
	`ªe_log
(
GEMM_LOG
, "%†h_°ï†%d, w_°ï†%d,Ñemaö_h_num %d, w_off£à%d", 
__func__
, 
h_°ïs
, 
w_°ïs
, 
ªmaö_h_num
, 
w_off£t
);

52 
p_weight
 = 
p_c⁄v_weight
->
‹i_buf
;

53 
p_sig1
 = 
p_sig_˘r
->
cﬁ_buf
;

54 
p_sig2
 = 
p_sig1
 + 
w_off£t
;

55 
p_„©
 = 
p_out_„©uª
->
‹i_buf
;

56 
uöt32_t
 
h_°ï_öd
 = 0; h_°ï_öd<
h_°ïs
; h_step_ind++)

58 
vec_weight
 = 
	`vld1_f32
(
p_weight
);

59 
p_„©
 = 
p_out_„©uª
->
‹i_buf
;

60 
uöt32_t
 
w_°ï_öd
 = 0; w_°ï_öd<
w_°ïs
; w_step_ind++)

62 
vec_ö_„©uª1
 = 
	`vld1q_f32
(
p_sig1
);

63 
vec_ö_„©uª2
 = 
	`vld1q_f32
(
p_sig2
);

64 
vec_out_„©uª
 = 
	`vld1q_f32
(
p_„©
);

65 
vec_out_„©uª
 = 
	`vmœq_œ√_f32
(vec_out_„©uª, 
vec_ö_„©uª1
, 
vec_weight
, 0);

66 
vec_out_„©uª
 = 
	`vmœq_œ√_f32
(vec_out_„©uª, 
vec_ö_„©uª2
, 
vec_weight
, 1);

67 
	`v°1q_f32
(
p_„©
, 
vec_out_„©uª
);

68 
p_sig1
 +
FP_PACK_SIZE_W
;

69 
p_sig2
 +
FP_PACK_SIZE_W
;

70 
p_„©
 +
FP_PACK_SIZE_W
;

72 
p_weight
 +
FP_PACK_SIZE_H
;

73 
p_sig1
 +
w_off£t
;

74 
p_sig2
 +
w_off£t
;

77 
p_sig1
 = 
p_sig_˘r
->
cﬁ_buf
;

78 
p_weight
 = 
p_c⁄v_weight
->
‹i_buf
;

79 
p_sig1
 +
h_°ïs
*
FP_PACK_SIZE_H
*
w_off£t
;

80 
p_weight
 +
h_°ïs
*
FP_PACK_SIZE_H
;

81 
p_„©
 = 
p_out_„©uª
->
‹i_buf
;

82 
vec_weight
 = 
	`vld1_f32
(
p_weight
);

84 i‡(
ªmaö_h_num
!=0)

86 
uöt32_t
 
w_°ï_öd
 = 0; w_°ï_öd<
w_°ïs
; w_step_ind++)

88 
vec_ö_„©uª1
 = 
	`vld1q_f32
(
p_sig1
);

89 
vec_out_„©uª
 = 
	`vld1q_f32
(
p_„©
);

90 
vec_out_„©uª
 = 
	`vmœq_œ√_f32
(vec_out_„©uª, 
vec_ö_„©uª1
, 
vec_weight
, 0);

91 
	`v°1q_f32
(
p_„©
, 
vec_out_„©uª
);

92 
p_sig1
 +
FP_PACK_SIZE_W
;

93 
p_„©
 +
FP_PACK_SIZE_W
;

97 
EXIT_ECG_SEG_FP_GEMM
:

98 
GEMM_FUNC_EXIT
;

99  
ªtvÆ
;

100 
	}
}

	@src/ecg_seg_main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"¨m_utû.h
"

6 
	~"ecg_£g_def.h
"

7 
	~"ecg_£g_gemm.h
"

8 
	~"ecg_£g_m©rix.h
"

9 
	~"ecg_£g_modñ.h
"

10 
	~"ecg_£g_sig2cﬁ.h
"

11 
	~"ecg_£g_sig«l.h
"

12 
	~"ecg_ª•⁄£_def.h
"

13 
	~"ecg_£g_utû.h
"

15 
	$maö
(
¨gc
, * 
¨gv
[])

17 
	`ªe_log
(
LOG_DEBUG
, "%†°¨ts", 
__func__
);

19 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

20 **
öput_sig_∑th
 = 
NULL
;

21 
c⁄v_fu£_ªlu_t
 *
p_moduÀ
 = 
NULL
;

22 
sig«l_c⁄èöî_t
 *
p_öput_sig
 = 
NULL
;

23 
sig«l_c⁄èöî_t
 *
p_mid_„©uª
 = 
NULL
;

24 
sig2cﬁ_˘r_t
 *
p_sig2cﬁ_˘r
 = 
NULL
;

26 
öput_sig_∑th
 = 
	`ªe_mÆloc
((*));

27 
öput_sig_∑th
[0] = 
	`ªe_mÆloc
(()*
ECG_SEG_PATH_MAX
);

28 
	`•rötf
(
öput_sig_∑th
[0], "%s", 
ECG_TINY_SIGNAL
);

29 
	`ªe_log
(
LOG_DEBUG
, "%†∑th %s", 
__func__
, 
öput_sig_∑th
[0]);

31 
m©_sig_∑ø_t
 
weight_∑ø
 = {.
‹i_l
 = 
ECG_SEG_ENCODER_CONVRELU_1_K_L
,

32 .
k_l
 = 
ECG_SEG_ENCODER_CONVRELU_1_K_L
,

33 .
∑ddög
 = 
ECG_SEG_ENCODER_CONVRELU_1_K_DUMMING_PADDING
,

34 .
°ride
 = 
ECG_SEG_ENCODER_CONVRELU_1_K_DUMMING_STRIDE
,};

35 
m©_sig_∑ø_t
 
öput_sig_∑ø
 = {.
‹i_l
 = 
ECG_SIGNAL_ORI_L
,

36 .
k_l
 = 
ECG_SIGNAL_K_L
,

37 .
∑ddög
 = 
ECG_SIGNAL_PADDING
,

38 .
°ride
 = 
ECG_SIGNAL_STRIDE
,};

39 
m©_sig_∑ø_t
 
mid_„©_∑ø
 = {.
‹i_l
 = 
ECG_SIGNAL_MID1_ORI_L
,

40 .
k_l
 = 
ECG_SIGNAL_MID1_K_L
,

41 .
∑ddög
 = 
ECG_SIGNAL_MID1_PADDING
,

42 .
°ride
 = 
ECG_SIGNAL_MID1_STRIDE
,};

44 
	`c⁄v_fu£_ªlu_c⁄°ru˘‹_f›í
(&
weight_∑ø
, &
p_moduÀ
,

45 
UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT0
,

46 
UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT1
,

47 
UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT2
,

48 
UNET_ENCODER1_CONV1D_BLOCK_1_CONV_WEIGHT3
,

49 
UNET_ENCODER1_CONV1D_BLOCK_1_CONV_BIAS
);

50 
ªtvÆ
 = 
	`sig«l_c⁄èöî_c⁄°ru˘‹_Â_f›í
(
ECG_SIGNAL_ORI_C
,

51 &
öput_sig_∑ø
,

52 &
p_öput_sig
,

53 
öput_sig_∑th
);

54 
	`ªe_log
(
LOG_DEBUG
, "%†ªtvÆ o‡sig«l_c⁄èöî_c⁄°ru˘‹_Â_f›í %d", 
__func__
, 
ªtvÆ
);

55 
ªtvÆ
 = 
	`sig«l_c⁄èöî_c⁄°ru˘‹
(
ECG_SIGNAL_MID1_MAX_C
,

56 &
mid_„©_∑ø
,

57 &
p_mid_„©uª
);

58 
	`ªe_log
(
LOG_DEBUG
, "%†ªtvÆ o‡sig«l_c⁄èöî_c⁄°ru˘‹ %d", 
__func__
, 
ªtvÆ
);

59 
ªtvÆ
 = 
	`sig2cﬁ_˘r_Â_c⁄°ru˘‹
(
ECG_SIG2COL_MAX_OUT_L
,

60 
ECG_SIG2COL_MAX_K_L
,

61 &
p_sig2cﬁ_˘r
);

62 
	`ªe_log
(
LOG_DEBUG
, "%†ªtvÆ o‡sig2cﬁ_˘r_Â_c⁄°ru˘‹ %d", 
__func__
, 
ªtvÆ
);

63 
ªtvÆ
 = 
	`sig2cﬁ_m©_Â
(
p_sig2cﬁ_˘r
, 
p_öput_sig
->
sig«l
);

64 
	`ªe_log
(
LOG_DEBUG
, "%†ªtvÆ o‡sig2cﬁ_m©_Â %d", 
__func__
, 
ªtvÆ
);

65 
	`ecg_£g_Â_gemm
(&(
p_moduÀ
->
c⁄v_weight
[0]),

66 
p_sig2cﬁ_˘r
,

67 &(
p_mid_„©uª
->
sig«l
[0]));

68 
	`¥öt_m©_‹i_Â
(&(
p_mid_„©uª
->
sig«l
[0]));

69 
	`ªe_log
(
LOG_DEBUG
, "%†íds", 
__func__
);

71 
	`c⁄v_fu£_ªlu_de°ru˘‹
(
p_moduÀ
);

72 
	`sig«l_c⁄èöî_de°ru˘‹
(
p_öput_sig
);

73 
	`sig«l_c⁄èöî_de°ru˘‹
(
p_mid_„©uª
);

74 
	`sig2cﬁ_˘r_de°ru˘‹
(
p_sig2cﬁ_˘r
);

75 
	`ªe_‰ì
(
p_moduÀ
);

76 
	`ªe_‰ì
(
p_öput_sig
);

77 
	`ªe_‰ì
(
p_mid_„©uª
);

78 
	`ªe_‰ì
(
p_sig2cﬁ_˘r
);

79 
	`ªe_‰ì
(
öput_sig_∑th
[0]);

80 
	`ªe_‰ì
(
öput_sig_∑th
);

82 
	}
}

	@src/ecg_seg_matrix.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

4 
	~"¨m_utû.h
"

5 
	~"¨m_ty≥def.h
"

6 
	~"ecg_ª•⁄£_def.h
"

7 
	~"ecg_£g_m©rix.h
"

9 
	$m©_sig_Â_f›í
(*
p_m©
, *
∑th
)

11 
MATRIX_FUNC_ENTRANCE
;

12 
size_t
 
fûe_size
 = 0, 
ªad_size
;

13 
FILE
 *
m©_fûe
 = 
NULL
;

14 
	`ªe_check_nuŒ_exô
(
p_m©
, 
EXIT_MAT_SIG_FP_FOPEN
, "%†occur†îr‹ duêtÿp_m© i†NULL", 
__func__
);

15 
	`ªe_check_nuŒ_exô
(
∑th
, 
EXIT_MAT_SIG_FP_FOPEN
, "%†occur†îr‹ duêtÿ∑th i†NULL", 
__func__
);

16 
	`ªe_check_f›í
(
m©_fûe
, 
∑th
, "rb", 
EXIT_MAT_SIG_FP_FOPEN
);

17 
	`ªe_fûe_size
(
fûe_size
, 
m©_fûe
);

18 
	`ªe_log
(
MATRIX_LOG
, "%†fûe_sizê%lu", 
__func__
, 
fûe_size
);

19 
	`ªe_check_f›í
(
m©_fûe
, 
∑th
, "rb", 
EXIT_MAT_SIG_FP_FOPEN
);

20 
	`ªe_fûe_ªad
(
m©_fûe
, 
p_m©
, 
fûe_size
, 
ªad_size
);

21 
EXIT_MAT_SIG_FP_FOPEN
:

22 
MATRIX_FUNC_EXIT
;

23 
	}
}

25 
	$¥öt_m©_sig_∑ø
(
m©_sig_∑ø_t
 *
p_∑øm
)

27 
MATRIX_FUNC_ENTRANCE
;

28 
	`MATRIX_PRINTF
("%†p_∑øm->‹i_»%d\n", 
__func__
, 
p_∑øm
->
‹i_l
);

29 
	`MATRIX_PRINTF
("%†p_∑øm->k_»%d\n", 
__func__
, 
p_∑øm
->
k_l
);

30 
	`MATRIX_PRINTF
("%†p_∑øm->∑ddög %d\n", 
__func__
, 
p_∑øm
->
∑ddög
);

31 
	`MATRIX_PRINTF
("%†p_∑øm->°ridê%d\n", 
__func__
, 
p_∑øm
->
°ride
);

32 
MATRIX_FUNC_EXIT
;

33 
	}
}

35 
	$¥öt_m©_∑ø
(
m©_sig_t
 *
p_m©
)

37 
MATRIX_FUNC_ENTRANCE
;

38 
	`MATRIX_PRINTF
("%†p_m©->‹i_»%d\n", 
__func__
, 
p_m©
->
‹i_l
);

39 
	`MATRIX_PRINTF
("%†p_m©->out_»%d\n", 
__func__
, 
p_m©
->
out_l
);

40 
	`MATRIX_PRINTF
("%†p_m©->cﬁ_h %d\n", 
__func__
, 
p_m©
->
cﬁ_h
);

41 
	`MATRIX_PRINTF
("%†p_m©->cﬁ_w %d\n", 
__func__
, 
p_m©
->
cﬁ_w
);

42 
	`MATRIX_PRINTF
("%†p_m©->∑ck_w_°ï %d\n", 
__func__
, 
p_m©
->
∑ck_w_°ï
);

43 
	`MATRIX_PRINTF
("%†p_m©->∑ck_h %d\n", 
__func__
, 
p_m©
->
∑ck_h
);

44 
	`MATRIX_PRINTF
("%†p_m©->∑ck_w %d\n", 
__func__
, 
p_m©
->
∑ck_w
);

45 
	`MATRIX_PRINTF
("%†p_m©->∑ck_ñê%d\n", 
__func__
, 
p_m©
->
∑ck_ñe
);

46 
	`MATRIX_PRINTF
("%†p_m©->∑ddög %d\n", 
__func__
, 
p_m©
->
∑ddög
);

47 
	`MATRIX_PRINTF
("%†p_m©->°ridê%d\n", 
__func__
, 
p_m©
->
°ride
);

48 
MATRIX_FUNC_EXIT
;

49 
	}
}

51 
	$¥öt_m©_‹i_Â
(
m©_sig_t
 *
p_m©
)

53 
MATRIX_FUNC_ENTRANCE
;

54 
	`ªe_check_nuŒ_exô
(
p_m©
, 
EXIT_PRINT_MAT_ORI_FP
, "%†occur†îr‹ duêtÿp_m© i†NULL", 
__func__
);

55 *
p_ñe
 = 
NULL
;

56 
	`MATRIX_PRINTF
("%†p_m©->‹i_»%d\n", 
__func__
, 
p_m©
->
‹i_l
);

57 
	`ªe_check_nuŒ_exô
(
p_m©
->
‹i_buf
, 
EXIT_PRINT_MAT_ORI_FP
, "%†occur†îr‹ duêtÿp_m©->‹i_bu‡i†NULL", 
__func__
);

58 
p_ñe
 = 
p_m©
->
‹i_buf
;

59 
uöt32_t
 
i
 = 0; i<
p_m©
->
‹i_l
; i++)

61 
	`MATRIX_PRINTF
("%3.05‡", *
p_ñe
);

62 
p_ñe
++;

64 
	`MATRIX_PRINTF
("\n");

65 
EXIT_PRINT_MAT_ORI_FP
:

66 
MATRIX_FUNC_EXIT
;

67 
	}
}

69 
öt32_t
 
	$m©_sig_c⁄°ru˘‹_Â_f›í
(
m©_sig_∑ø_t
 *
p_∑øm
,

70 
m©_sig_t
 *
p_m©
,

71 *
∑th
,

72 
BOOL
 
kî√l
)

74 
MATRIX_FUNC_ENTRANCE
;

75 
uöt32_t
 
ñe_num
 = 0;

76 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

77 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_∑øm
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP_FOPEN
,

78 "%†occur†îr‹ duêtÿp_∑øm i†NULL", 
__func__
);

79 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_m©
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP_FOPEN
,

80 "%†occur†îr‹ duêtÿp_m© i†NULL", 
__func__
);

81 
	`ªe_check_nuŒ_exô_ªtvÆ
(
∑th
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP_FOPEN
,

82 "%†occur†îr‹ duêtÿ∑th i†NULL", 
__func__
);

83 
	`ªe_log
(
MATRIX_LOG
, "%†kî√»%d", 
__func__
, 
kî√l
);

84 
	`¥öt_m©_sig_∑ø
(
p_∑øm
);

86 i‡(
kî√l
)

88 
p_m©
->
‹i_l
 = 
p_∑øm
->ori_l;

89 
p_m©
->
out_l
 = 
p_∑øm
->
‹i_l
;

90 
p_m©
->
∑ck_w_°ï
 =Ö_m©->
out_l
 / 
FP_PACK_SIZE_W
;

91 
p_m©
->
∑ck_w_°ï
 +(’_m©->
out_l
 % 
FP_PACK_SIZE_W
)!=0)?1:0;

92 
p_m©
->
∑ck_h
 = 1;

95 
p_m©
->
‹i_l
 = 
p_∑øm
->ori_l;

96 
p_m©
->
out_l
 = (
p_∑øm
->
‹i_l
+2*p_∑øm->
∑ddög
-p_∑øm->
k_l
)/p_∑øm->
°ride
+1;

97 
p_m©
->
cﬁ_h
 = 
p_∑øm
->
k_l
;

98 
p_m©
->
cﬁ_w
 =Ö_m©->
out_l
;

99 
p_m©
->
∑ck_w_°ï
 =Ö_m©->
out_l
 / 
FP_PACK_SIZE_W
;

100 
p_m©
->
∑ck_w_°ï
 +(’_m©->
out_l
 % 
FP_PACK_SIZE_W
)!=0)?1:0;

101 
p_m©
->
∑ck_h
 =Ö_m©->
cﬁ_h
;

103 
p_m©
->
∑ck_w
 =Ö_m©->
∑ck_w_°ï
 * 
FP_PACK_SIZE_W
;

104 
p_m©
->
∑ck_ñe
 =Ö_m©->
∑ck_h
 *Ö_m©->
∑ck_w
;

105 
p_m©
->
∑ddög
 = 
p_∑øm
->padding;

106 
p_m©
->
°ride
 = 
p_∑øm
->stride;

107 
	`¥öt_m©_∑ø
(
p_m©
);

108 i‡(
kî√l
)

110 
ñe_num
 = 
p_m©
->
∑ck_ñe
;

111 
	`ªe_log
(
MATRIX_LOG
, "%†¥ï¨e†tÿÆloˇã kî√»buf„r", 
__func__
);

114 
ñe_num
 = 
p_m©
->
‹i_l
/
FP_PACK_SIZE_W
;

115 
ñe_num
 +((
p_m©
->
‹i_l
%
FP_PACK_SIZE_W
)!=0)?1:0;

116 
ñe_num
 *
FP_PACK_SIZE_W
;

117 
	`ªe_log
(
MATRIX_LOG
, "%†¥ï¨e†tÿÆloˇã sig«»buf„r", 
__func__
);

119 
	`ªe_log
(
MATRIX_LOG
, "%†¥ï¨e†tÿÆloˇã %d * ELE_FP_SIZE", 
__func__
, 
ñe_num
);

120 
p_m©
->
‹i_buf
 = 
	`ªe_mÆloc
(
ñe_num
*
ELE_FP_SIZE
);

121 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_m©
->
‹i_buf
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP_FOPEN
,

122 "%†occur†îr‹ duêtÿÆloˇãÖ_m©->‹i_bu‡Áûed", 
__func__
);

123 
	`ªe_£t
(
p_m©
->
‹i_buf
, 0, 
ñe_num
*
ELE_FP_SIZE
);

124 
	`m©_sig_Â_f›í
(
p_m©
->
‹i_buf
, 
∑th
);

125 
	`¥öt_m©_‹i_Â
(
p_m©
);

126 
EXIT_MAT_SIG_CONSTRUCTOR_FP_FOPEN
:

127 
MATRIX_FUNC_EXIT
;

128  
ªtvÆ
;

129 
	}
}

131 
öt32_t
 
	$m©_sig_c⁄°ru˘‹_Â
(
m©_sig_∑ø_t
 *
p_∑øm
,

132 
m©_sig_t
 *
p_m©
,

133 
BOOL
 
kî√l
)

135 
MATRIX_FUNC_ENTRANCE
;

136 
uöt32_t
 
ñe_num
 = 0;

137 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

138 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_∑øm
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP
,

139 "%†occur†îr‹ duêtÿp_∑øm i†NULL", 
__func__
);

140 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_m©
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP
,

141 "%†occur†îr‹ duêtÿp_m© i†NULL", 
__func__
);

142 
	`¥öt_m©_sig_∑ø
(
p_∑øm
);

144 i‡(
kî√l
)

146 
p_m©
->
‹i_l
 = 
p_∑øm
->ori_l;

147 
p_m©
->
out_l
 = 
p_∑øm
->
‹i_l
;

148 
p_m©
->
∑ck_w_°ï
 =Ö_m©->
out_l
 / 
FP_PACK_SIZE_W
 + 1;

149 
p_m©
->
∑ck_h
 = 1;

152 
p_m©
->
‹i_l
 = 
p_∑øm
->ori_l;

153 
p_m©
->
out_l
 = (
p_∑øm
->
‹i_l
+2*p_∑øm->
∑ddög
-p_∑øm->
k_l
)/p_∑øm->
°ride
+1;

154 
p_m©
->
cﬁ_h
 = 
p_∑øm
->
k_l
;

155 
p_m©
->
cﬁ_w
 =Ö_m©->
out_l
;

156 
p_m©
->
∑ck_w_°ï
 =Ö_m©->
out_l
 / 
FP_PACK_SIZE_W
;

157 
p_m©
->
∑ck_w_°ï
 +(’_m©->
out_l
 % 
FP_PACK_SIZE_W
)!=0)?1:0;

158 
p_m©
->
∑ck_h
 =Ö_m©->
cﬁ_h
;

160 
p_m©
->
∑ck_w
 =Ö_m©->
∑ck_w_°ï
 * 
FP_PACK_SIZE_W
;

161 
p_m©
->
∑ck_ñe
 =Ö_m©->
∑ck_h
 *Ö_m©->
∑ck_w
;

162 
p_m©
->
∑ddög
 = 
p_∑øm
->padding;

163 
p_m©
->
°ride
 = 
p_∑øm
->stride;

164 
	`¥öt_m©_∑ø
(
p_m©
);

166 i‡(
kî√l
)

168 
ñe_num
 = 
p_m©
->
∑ck_ñe
;

169 
	`ªe_log
(
MATRIX_LOG
, "%†¥ï¨e†tÿÆloˇã kî√l_buf„r", 
__func__
);

171 
ñe_num
 = 
p_m©
->
‹i_l
/
FP_PACK_SIZE_W
;

172 
ñe_num
 +((
p_m©
->
‹i_l
%
FP_PACK_SIZE_W
)!=0)?1:0;

173 
ñe_num
 *
FP_PACK_SIZE_W
;

174 
	`ªe_log
(
MATRIX_LOG
, "%†¥ï¨e†tÿÆloˇã sig«»buf„r", 
__func__
);

176 
	`ªe_log
(
MATRIX_LOG
, "%†¥ï¨e†tÿÆloˇã %d * ELE_FP_SIZE", 
__func__
, 
ñe_num
);

177 
p_m©
->
‹i_buf
 = 
	`ªe_mÆloc
(
ñe_num
*
ELE_FP_SIZE
);

178 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_m©
->
‹i_buf
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_MAT_SIG_CONSTRUCTOR_FP
,

179 "%†occur†îr‹ duêtÿÆloˇãÖ_m©->‹i_bu‡Áûed", 
__func__
);

180 
	`ªe_£t
(
p_m©
->
‹i_buf
, 0, 
ñe_num
*
ELE_FP_SIZE
);

181 
	`¥öt_m©_‹i_Â
(
p_m©
);

182 
EXIT_MAT_SIG_CONSTRUCTOR_FP
:

183 
MATRIX_FUNC_EXIT
;

184  
ªtvÆ
;

185 
	}
}

187 
	$m©_sig_de°ru˘‹
(
m©_sig_t
 *
p_m©
)

189 
MATRIX_FUNC_ENTRANCE
;

190 
	`ªe_check_nuŒ_exô
(
p_m©
, 
EXIT_MAT_SIG_DESTRUCTOR
, "%†dúe˘lyÑëu∫†duêtÿp_m© i†NULL", 
__func__
);

191 
	`ªe_‰ì
(
p_m©
->
‹i_buf
);

192 
EXIT_MAT_SIG_DESTRUCTOR
:

193 
MATRIX_FUNC_EXIT
;

194 
	}
}

	@src/ecg_seg_model.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"¨m_utû.h
"

6 
	~"¨m_ty≥def.h
"

7 
	~"ecg_£g_m©rix.h
"

8 
	~"ecg_£g_modñ.h
"

9 
	~"ecg_£g_sig2cﬁ.h
"

10 
	~"ecg_ª•⁄£_def.h
"

12 
	$¥ötf_c⁄v_fu£_büs
(
c⁄v_fu£_ªlu_t
 *
p_›
)

14 
MODEL_FUNC_ENTRANCE
;

15 
	`ªe_check_nuŒ_exô
(
p_›
, 
EXIT_PRINTF_CONV_FUSE_BIAS
, "%†occur†îr‹ duêtÿp_› i†NULL", 
__func__
);

16 
	`MODEL_PRINTF
("%†%03.4‡%03.4‡%03.4‡%03.4f\n", 
__func__
,

17 
p_›
->
c⁄v_büs
[0],

18 
p_›
->
c⁄v_büs
[1],

19 
p_›
->
c⁄v_büs
[2],

20 
p_›
->
c⁄v_büs
[3]);

21 
EXIT_PRINTF_CONV_FUSE_BIAS
:

22 
MODEL_FUNC_EXIT
;

23 
	}
}

25 
öt32_t
 
	$c⁄v_fu£_büs_f›í
(*
büs_∑th
,

26 *
c⁄v_büs_buf
)

28 
MODEL_FUNC_ENTRANCE
;

29 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

30 
size_t
 
fûe_size
 = 0, 
ªad_size
 = 0;

31 
FILE
 *
büs_fûe
 = 
NULL
;

32 
	`ªe_check_nuŒ_exô_ªtvÆ
(
büs_∑th
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_BIAS_FOPEN
,

33 "%†occur†îr‹ duêtÿbüs_∑th i†NULL", 
__func__
);

34 
	`ªe_check_nuŒ_exô_ªtvÆ
(
c⁄v_büs_buf
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_BIAS_FOPEN
,

35 "%†occur†îr€ duêtÿc⁄v_büs_bu‡i†NULL", 
__func__
);

36 
	`ªe_check_f›í
(
büs_fûe
, 
büs_∑th
, "rb", 
EXIT_CONV_FUSE_BIAS_FOPEN
);

37 
	`ªe_fûe_size
(
fûe_size
, 
büs_fûe
);

38 
	`ªe_log
(
MODEL_LOG
, "%†fûe_sizê%lu", 
__func__
, 
fûe_size
);

39 
	`ªe_check_f›í
(
büs_fûe
, 
büs_∑th
, "rb", 
EXIT_CONV_FUSE_BIAS_FOPEN
);

40 
	`ªe_fûe_ªad
(
büs_fûe
, 
c⁄v_büs_buf
, 
fûe_size
, 
ªad_size
);

41 
EXIT_CONV_FUSE_BIAS_FOPEN
:

42 
MODEL_FUNC_EXIT
;

43  
ªtvÆ
;

44 
	}
}

46 
öt32_t
 
	$c⁄v_fu£_ªlu_c⁄°ru˘‹_f›í
(
m©_sig_∑ø_t
 *
p_∑ø
,

47 
c⁄v_fu£_ªlu_t
 **
µ_moduÀ
,

48 *
weight_∑th0
,

49 *
weight_∑th1
,

50 *
weight_∑th2
,

51 *
weight_∑th3
,

52 *
büs_∑th
)

54 
MODEL_FUNC_ENTRANCE
;

55 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

56 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_∑ø
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

57 "%†occur†îr‹ duêtÿp_∑ø i†NULL", 
__func__
);

58 
	`ªe_check_nuŒ_exô_ªtvÆ
(
µ_moduÀ
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

59 "%†occur†îr‹ duêtÿµ_moduÀ i†NULL", 
__func__
);

60 
	`ªe_check_nuŒ_exô_ªtvÆ
(
weight_∑th0
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

61 "%†occur†îr‹ duêtÿweight_∑th0 i†NULL", 
__func__
);

62 
	`ªe_check_nuŒ_exô_ªtvÆ
(
weight_∑th1
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

63 "%†occur†îr‹ duêtÿweight_∑th1 i†NULL", 
__func__
);

64 
	`ªe_check_nuŒ_exô_ªtvÆ
(
weight_∑th2
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

65 "%†occur†îr‹ duêtÿweight_∑th2 i†NULL", 
__func__
);

66 
	`ªe_check_nuŒ_exô_ªtvÆ
(
weight_∑th3
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

67 "%†occur†îr‹ duêtÿweight_∑th3 i†NULL", 
__func__
);

68 
	`ªe_check_nuŒ_exô_ªtvÆ
(
büs_∑th
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
,

69 "%†occur†îr‹ duêtÿbüs_∑th i†NULL", 
__func__
);

70 *
µ_moduÀ
 = 
	`ªe_mÆloc
((
c⁄v_fu£_ªlu_t
));

71 
	`ªe_£t
(*
µ_moduÀ
, 0, (
c⁄v_fu£_ªlu_t
));

72 
ªtvÆ
 |
	`m©_sig_c⁄°ru˘‹_Â_f›í
(
p_∑ø
,

73 &(*
µ_moduÀ
)->
c⁄v_weight
[0],

74 
weight_∑th0
,

75 
TRUE
);

76 
	`ªe_check_åue_exô
((
ªtvÆ
 !
ECG_SEG_OK
), 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
, "%†occur†îr‹ whí c⁄°ru˘†weight0", 
__func__
);

77 
ªtvÆ
 |
	`m©_sig_c⁄°ru˘‹_Â_f›í
(
p_∑ø
,

78 &(*
µ_moduÀ
)->
c⁄v_weight
[1],

79 
weight_∑th1
,

80 
TRUE
);

81 
	`ªe_check_åue_exô
((
ªtvÆ
 !
ECG_SEG_OK
), 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
, "%†occur†îr‹ whí c⁄°ru˘†weight1", 
__func__
);

82 
ªtvÆ
 |
	`m©_sig_c⁄°ru˘‹_Â_f›í
(
p_∑ø
,

83 &(*
µ_moduÀ
)->
c⁄v_weight
[2],

84 
weight_∑th2
,

85 
TRUE
);

86 
	`ªe_check_åue_exô
((
ªtvÆ
 !
ECG_SEG_OK
), 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
, "%†occur†îr‹ whí c⁄°ru˘†weight2", 
__func__
);

87 
ªtvÆ
 |
	`m©_sig_c⁄°ru˘‹_Â_f›í
(
p_∑ø
,

88 &(*
µ_moduÀ
)->
c⁄v_weight
[3],

89 
weight_∑th3
,

90 
TRUE
);

91 
	`ªe_check_åue_exô
((
ªtvÆ
 !
ECG_SEG_OK
), 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
, "%†occur†îr‹ whí c⁄°ru˘†weight3", 
__func__
);

92 
	`c⁄v_fu£_büs_f›í
(
büs_∑th
,

93 (*
µ_moduÀ
)->
c⁄v_büs
);

94 
	`¥ötf_c⁄v_fu£_büs
((*
µ_moduÀ
));

95 
EXIT_CONV_FUSE_RELU_CONSTRUCTOR
:

96 
MODEL_FUNC_EXIT
;

97  
ªtvÆ
;

98 
	}
}

100 
öt32_t
 
	$c⁄v_fu£_ªlu_f‹w¨d
(
c⁄v_fu£_ªlu_t
 *
p_moduÀ
,

101 
sig2cﬁ_˘r_t
 *
p_cﬁ_˘r
,

102 
sig«l_c⁄èöî_t
 *
p_ö_sig_c⁄
,

103 
sig«l_c⁄èöî_t
 *
p_out_sig_c⁄
,

104 
uöt32_t
 
öput_num
,

105 
uöt32_t
 
ö_sig2cﬁ_num
,

106 
uöt32_t
 
ouçut_num
)

108 
MODEL_FUNC_ENTRANCE
;

109 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

110 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_moduÀ
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

111 "%†occur†îr‹ duêtÿp_moduÀ i†NULL", 
__func__
);

112 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_cﬁ_˘r
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

113 "%†occur†îr‹ duêtÿp_cﬁ_˘∏i†NULL", 
__func__
);

114 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_ö_sig_c⁄
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

115 "%†occur†îr‹ duêtÿp_ö_sig_c⁄ i†NULL", 
__func__
);

116 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_out_sig_c⁄
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

117 "%†occur†îr‹ duêtÿp_out_sig_c⁄ i†NULL", 
__func__
);

118 
	`ªe_check_åue_exô_ªtvÆ
((
öput_num
 =0), 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

119 "%†dúe˘lyÑëu∫ duêtÿöput_num =0", 
__func__
);

120 
	`ªe_check_åue_exô_ªtvÆ
((
ouçut_num
 =0), 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

121 "%†dúe˘lyÑëu∫ duêtÿouçut_num =0", 
__func__
);

122 
	`ªe_check_åue_exô_ªtvÆ
((
ouçut_num
 !4), 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

123 "%†occur†îr‹ duêtÿouçut_num !4", 
__func__
);

124 
	`ªe_check_åue_exô_ªtvÆ
((
ö_sig2cﬁ_num
 !
öput_num
), 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_CONV_FUSE_RELU_FORWARD
,

125 "%†occur†îr‹ duêtÿö_sig2cﬁ_num !öput_num", 
__func__
);

134 
EXIT_CONV_FUSE_RELU_FORWARD
:

135 
MODEL_FUNC_EXIT
;

136  
ªtvÆ
;

137 
	}
}

139 
	$c⁄v_fu£_ªlu_de°ru˘‹
(
c⁄v_fu£_ªlu_t
 *
p_moduÀ
)

141 
MODEL_FUNC_ENTRANCE
;

142 
	`ªe_check_nuŒ_exô
(
p_moduÀ
, 
EXIT_CONV_FUSE_RELU_DESTRUCTOR
, "%†dúe˘lyÑëu∫ duêtÿp_moduÀ i†NULL", 
__func__
);

143 
uöt32_t
 
i
 = 0; i<4; i++)

145 
	`m©_sig_de°ru˘‹
(&
p_moduÀ
->
c⁄v_weight
[
i
]);

147 
EXIT_CONV_FUSE_RELU_DESTRUCTOR
:

148 
MODEL_FUNC_EXIT
;

149 
	}
}

	@src/ecg_seg_sig2col.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

4 
	~"¨m_ty≥def.h
"

5 
	~"¨m_utû.h
"

6 
	~"ecg_£g_m©rix.h
"

7 
	~"ecg_£g_sig2cﬁ.h
"

8 
	~"ecg_ª•⁄£_def.h
"

9 
	~"ecg_£g_utû.h
"

11 
	$¥öt_sig2cﬁ_˘r_∑øm
(
sig2cﬁ_˘r_t
 *
p_˘r
)

13 
SIG2COL_FUNC_ENTRANCE
;

14 
	`ªe_check_nuŒ_exô
(
p_˘r
, 
EXIT_PRINT_SIG2COL_CTR_PARAM
, "%†occur†îr‹ duêtÿp_˘∏i†NULL", 
__func__
);

15 
	`SIG2COL_PRINTF
("%†p_˘r->cur_out_»%d\n", 
__func__
, 
p_˘r
->
cur_out_l
);

16 
	`SIG2COL_PRINTF
("%†p_˘r->cur_out_∑ck_»%d\n", 
__func__
, 
p_˘r
->
cur_out_∑ck_l
);

17 
	`SIG2COL_PRINTF
("%†p_˘r->cur_k_»%d\n", 
__func__
, 
p_˘r
->
cur_k_l
);

18 
	`SIG2COL_PRINTF
("%†p_˘r->cur_ñe_num %d\n", 
__func__
, 
p_˘r
->
cur_ñe_num
);

19 
	`SIG2COL_PRINTF
("%†p_˘r->max_out_»%d\n", 
__func__
, 
p_˘r
->
max_out_l
);

20 
	`SIG2COL_PRINTF
("%†p_˘r->max_out_∑ck_»%d\n", 
__func__
, 
p_˘r
->
max_out_∑ck_l
);

21 
	`SIG2COL_PRINTF
("%†p_˘r->max_k_»%d\n", 
__func__
, 
p_˘r
->
max_k_l
);

22 
	`SIG2COL_PRINTF
("%†p_˘r->max_ñe_num %d\n", 
__func__
, 
p_˘r
->
max_ñe_num
);

23 
EXIT_PRINT_SIG2COL_CTR_PARAM
:

24 
SIG2COL_FUNC_EXIT
;

25 
	}
}

27 
ölöe
 
	$sig2cﬁ_gë_pixñ_Â
(
uöt32_t
 
sig_öd_w_∑ddög
, 
m©_sig_t
 *
p_m©
)

29 
SIG2COL_FUNC_ENTRANCE
;

30 
„©uª
 = 0.0f;

31 *
p_buf
 = (*)
p_m©
->
‹i_buf
;

32 
öt32_t
 
sig_öd_wo_∑ddög
 = 
sig_öd_w_∑ddög
 - 
p_m©
->
∑ddög
;

33 i‡((
sig_öd_wo_∑ddög
 >0Ë&& (sig_öd_wo_∑ddög < 
p_m©
->
‹i_l
))

35 
	`ªe_log
(
SIG2COL_LOG
, "sig_öd_wo_∑ddög %d %d", 
sig_öd_w_∑ddög
, 
sig_öd_wo_∑ddög
);

36 
„©uª
 = *(
p_buf
+
sig_öd_wo_∑ddög
);

38 
	`ªe_log
(
SIG2COL_LOG
, "%04.4f\n", 
„©uª
);

39 
SIG2COL_FUNC_EXIT
;

40  
„©uª
;

41 
	}
}

43 
	$sig2cﬁ_¥ötf_m©_Â
(
sig2cﬁ_˘r_t
 *
p_˘r
)

45 
SIG2COL_FUNC_ENTRANCE
;

46 *
p_cﬁ_buf
 = 
p_˘r
->
cﬁ_buf
;

47 
uöt32_t
 
cﬁ_h_öd
 = 0; cﬁ_h_öd<
p_˘r
->
cur_k_l
; col_h_ind++)

49 
uöt32_t
 
cﬁ_w_öd
 = 0; cﬁ_w_öd<
p_˘r
->
cur_out_∑ck_l
; col_w_ind++)

51 
	`SIG2COL_PRINTF
("%04.4‡", *
p_cﬁ_buf
);

52 
p_cﬁ_buf
++;

54 
	`SIG2COL_PRINTF
("\n");

57 
SIG2COL_FUNC_EXIT
;

58 
	}
}

60 
öt32_t
 
	$sig2cﬁ_˘r_Â_c⁄°ru˘‹
(
uöt32_t
 
max_out_l
, uöt32_à
max_k_l
, 
sig2cﬁ_˘r_t
 **
µ_˘r
)

62 
SIG2COL_FUNC_ENTRANCE
;

63 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

64 
uöt32_t
 
ñe_num
 = 0;

65 
	`ªe_check_nuŒ_exô_ªtvÆ
(
µ_˘r
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIG2COL_CTR_CONTRUCTOR
,

66 "%†occur†îr‹ duêtÿµ_˘∏i†NULL", 
__func__
);

67 
	`ªe_check_åue_exô_ªtvÆ
((*
µ_˘r
 !
NULL
), 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIG2COL_CTR_CONTRUCTOR
,

68 "%†occur†îr‹ duêtÿ*µ_˘∏i†NULL", 
__func__
);

69 *
µ_˘r
 = 
	`ªe_mÆloc
((
sig2cﬁ_˘r_t
));

70 
	`ªe_£t
(*
µ_˘r
, 0, (
sig2cﬁ_˘r_t
));

71 (*
µ_˘r
)->
max_out_l
 = max_out_l;

72 (*
µ_˘r
)->
max_out_∑ck_l
 = (
max_out_l
 / 
FP_PACK_SIZE_W
 + 1) * FP_PACK_SIZE_W;

73 (*
µ_˘r
)->
max_k_l
 = max_k_l;

74 (*
µ_˘r
)->
max_ñe_num
 = ((*µ_˘r)->
max_out_∑ck_l
)*((*µ_˘r)->
max_k_l
);

75 
	`¥öt_sig2cﬁ_˘r_∑øm
(*
µ_˘r
);

76 
ñe_num
 = (*
µ_˘r
)->
max_ñe_num
;

77 
	`ªe_log
(
SIG2COL_LOG
, "%†¥ï¨e†tÿÆloˇã %d flﬂtögÖoöàbuf„r", 
__func__
, 
ñe_num
);

78 (*
µ_˘r
)->
cﬁ_buf
 = 
	`ªe_mÆloc
(
ñe_num
*
ELE_FP_SIZE
);

79 
	`ªe_check_nuŒ_exô_ªtvÆ
((*
µ_˘r
)->
cﬁ_buf
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIG2COL_CTR_CONTRUCTOR
,

80 "%†occur†îr‹ duêtÿ*µ_˘r->cﬁ_bu‡i†NULL", 
__func__
);

81 
	`ªe_£t
((*
µ_˘r
)->
cﬁ_buf
, 0, 
ñe_num
*
ELE_FP_SIZE
);

82 
EXIT_SIG2COL_CTR_CONTRUCTOR
:

83 
SIG2COL_FUNC_EXIT
;

84  
ªtvÆ
;

85 
	}
}

87 
öt32_t
 
	$sig2cﬁ_m©_Â
(
sig2cﬁ_˘r_t
 *
p_˘r
, 
m©_sig_t
 *
p_m©
)

89 
SIG2COL_FUNC_ENTRANCE
;

90 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

91 
uöt32_t
 
ñe_num
 = 0, 
sig_öd_w_∑ddög
 = 0;

92 
„©uª
 = 0.0f;

93 *
p_cﬁ_buf
 = 
NULL
;

94 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_m©
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIG2COL_MAT_FP
,

95 "%†occur†îr‹ duêtÿp_m© i†NULL", 
__func__
);

96 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_˘r
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIG2COL_MAT_FP
,

97 "%†occur†îr‹ duêtÿp_˘∏i†NULL", 
__func__
);

98 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_˘r
->
cﬁ_buf
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIG2COL_MAT_FP
,

99 "%†occur†îr‹ duêtÿp_˘r->cﬁ_bu‡i†NULL", 
__func__
);

100 
p_˘r
->
cur_k_l
 = 
p_m©
->
cﬁ_h
;

101 
p_˘r
->
cur_out_l
 = 
p_m©
->
cﬁ_w
;

102 
p_˘r
->
cur_out_∑ck_l
 = 
p_m©
->
∑ck_w
;

103 
p_˘r
->
cur_ñe_num
 =Ö_˘r->
cur_k_l
 *Ö_˘r->
cur_out_∑ck_l
;

104 
	`¥öt_sig2cﬁ_˘r_∑øm
(
p_˘r
);

105 
ñe_num
 = 
p_˘r
->
cur_ñe_num
;

106 
p_cﬁ_buf
 = 
p_˘r
->
cﬁ_buf
;

107 
	`ªe_£t
(
p_cﬁ_buf
, 0, 
ñe_num
*
ELE_FP_SIZE
);

109 
uöt32_t
 
cﬁ_h_öd
 = 0; cﬁ_h_öd<
p_˘r
->
cur_k_l
; col_h_ind++)

111 
sig_öd_w_∑ddög
 = 
cﬁ_h_öd
;

112 
uöt32_t
 
cﬁ_w_öd
 = 0; cﬁ_w_öd<
p_˘r
->
cur_out_∑ck_l
; col_w_ind++)

114 i‡(
cﬁ_w_öd
<
p_˘r
->
cur_out_l
)

116 
„©uª
 = 
	`sig2cﬁ_gë_pixñ_Â
(
sig_öd_w_∑ddög
, 
p_m©
);

119 
„©uª
 = 0.0f;

121 *
p_cﬁ_buf
 = 
„©uª
;

122 
sig_öd_w_∑ddög
 +
p_m©
->
°ride
;

123 
p_cﬁ_buf
++;

127 
EXIT_SIG2COL_MAT_FP
:

128 
SIG2COL_FUNC_EXIT
;

129  
ªtvÆ
;

130 
	}
}

132 
	$sig2cﬁ_˘r_de°ru˘‹
(
sig2cﬁ_˘r_t
 *
p_˘r
)

134 
SIG2COL_FUNC_ENTRANCE
;

135 
	`ªe_check_nuŒ_exô
(
p_˘r
, 
EXIT_SIG2COL_CTR_DESTRUCTOR
, "%†occur†îr‹ duêtÿp_˘∏i†NULL", 
__func__
);

136 
	`ªe_‰ì
(
p_˘r
->
cﬁ_buf
);

137 
EXIT_SIG2COL_CTR_DESTRUCTOR
:

138 
SIG2COL_FUNC_EXIT
;

139 
	}
}

	@src/ecg_seg_signal.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

4 
	~"¨m_utû.h
"

5 
	~"¨m_ty≥def.h
"

6 
	~"ecg_ª•⁄£_def.h
"

7 
	~"ecg_£g_m©rix.h
"

8 
	~"ecg_£g_sig«l.h
"

10 
öt32_t
 
	$sig«l_c⁄èöî_c⁄°ru˘‹_Â_f›í
(
uöt32_t
 
sig«l_num
,

11 
m©_sig_∑ø_t
 *
p_∑ø
,

12 
sig«l_c⁄èöî_t
 **
µ_c⁄èöî
,

13 **
sig«l_∑th
)

15 
SIGNAL_FUNC_ENTRANCE
;

16 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

17 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_∑ø
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

18 "%†occur†îr‹ duêtÿp_∑ø i†NULL", 
__func__
);

19 
	`ªe_check_nuŒ_exô_ªtvÆ
(
µ_c⁄èöî
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

20 "%†occur†îr‹ duêtÿµ_c⁄èöî i†NULL", 
__func__
);

21 
	`ªe_check_nuŒ_exô_ªtvÆ
(
sig«l_∑th
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

22 "%†occur†îr‹ duêtÿsig«l_∑th i†NULL", 
__func__
);

23 
	`ªe_check_åue_exô
((
sig«l_num
 =0), 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
, "%†dúe˘lyÑëu∫†duêtÿsig«l_num =0", 
__func__
);

24 *
µ_c⁄èöî
 = 
	`ªe_mÆloc
((
sig«l_c⁄èöî_t
));

25 
	`ªe_check_nuŒ_exô_ªtvÆ
(*
µ_c⁄èöî
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

26 "%†occur†îr‹ duêtÿµ_c⁄èöî i†NULL", 
__func__
);

27 
	`ªe_£t
(*
µ_c⁄èöî
, 0, (
sig«l_c⁄èöî_t
));

28 (*
µ_c⁄èöî
)->
sig«l_num
 = signal_num;

29 
	`ªe_log
(
SIGNAL_LOG
, "%†sig«l_num %d %d", 
__func__
, (*
µ_c⁄èöî
)->
sig«l_num
, signal_num);

30 (*
µ_c⁄èöî
)->
sig«l
 = 
	`ªe_mÆloc
((
m©_sig_t
)*
sig«l_num
);

31 
	`ªe_check_nuŒ_exô_ªtvÆ
((*
µ_c⁄èöî
)->
sig«l
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

32 "%†occur†îr‹ duêtÿÆloˇã (*µ_c⁄èöî)->sig«»Áûd", 
__func__
);

33 
	`ªe_£t
((*
µ_c⁄èöî
)->
sig«l
, 0, (
m©_sig_t
)*
sig«l_num
);

35 
uöt32_t
 
i
=0; i<
sig«l_num
; i++)

37 
	`ªe_log
(
SIGNAL_LOG
, "%†sig«»ödex i %d", 
__func__
, 
i
);

38 
	`ªe_check_nuŒ_exô_ªtvÆ
(
sig«l_∑th
[
i
], 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

39 "%†occur†îr‹ duêtÿsig«l_∑th[i] i†NULL", 
__func__
);

40 
	`ªe_check_nuŒ_exô_ªtvÆ
(&(*
µ_c⁄èöî
)->
sig«l
[
i
], 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
,

41 "%†occur†îr‹ duêtÿ(*µ_c⁄èöî)->sig«l[i] i†NULL", 
__func__
);

42 
	`ªe_log
(
SIGNAL_LOG
, "%†sig«l_∑th %s", 
__func__
, 
sig«l_∑th
[
i
]);

43 
	`m©_sig_c⁄°ru˘‹_Â_f›í
(
p_∑ø
, &(*
µ_c⁄èöî
)->
sig«l
[
i
], 
sig«l_∑th
[i], 
FALSE
);

45 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR_FP_FOPEN
:

46 
SIGNAL_FUNC_EXIT
;

47  
ªtvÆ
;

48 
	}
}

50 
öt32_t
 
	$sig«l_c⁄èöî_c⁄°ru˘‹
(
uöt32_t
 
sig«l_num
, 
m©_sig_∑ø_t
 *
p_∑ø
, 
sig«l_c⁄èöî_t
 **
µ_c⁄èöî
)

52 
SIGNAL_FUNC_ENTRANCE
;

53 
öt32_t
 
ªtvÆ
 = 
ECG_SEG_OK
;

54 
	`ªe_check_nuŒ_exô_ªtvÆ
(
p_∑ø
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
,

55 "%†occur†îr‹ duêtÿp_∑ø i†NULL", 
__func__
);

56 
	`ªe_check_nuŒ_exô_ªtvÆ
(
µ_c⁄èöî
, 
ªtvÆ
, 
ECG_SEG_INVALID_PARAM
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
,

57 "%†occur†îr‹ duêtÿµ_c⁄èöî i†NULL", 
__func__
);

58 
	`ªe_check_åue_exô
((
sig«l_num
 =0), 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
, "%†dúe˘lyÑëu∫†duêtÿsig«l_num =0", 
__func__
);

59 *
µ_c⁄èöî
 = 
	`ªe_mÆloc
((
sig«l_c⁄èöî_t
));

60 
	`ªe_check_nuŒ_exô_ªtvÆ
(*
µ_c⁄èöî
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
,

61 "%†occur†îr‹ duêtÿµ_c⁄èöî i†NULL", 
__func__
);

62 
	`ªe_£t
(*
µ_c⁄èöî
, 0, (
sig«l_c⁄èöî_t
));

63 (*
µ_c⁄èöî
)->
sig«l_num
 = signal_num;

64 
	`ªe_log
(
SIGNAL_LOG
, "%†sig«l_num %d %d", 
__func__
, (*
µ_c⁄èöî
)->
sig«l_num
, signal_num);

65 (*
µ_c⁄èöî
)->
sig«l
 = 
	`ªe_mÆloc
((
m©_sig_t
)*
sig«l_num
);

66 
	`ªe_check_nuŒ_exô_ªtvÆ
((*
µ_c⁄èöî
)->
sig«l
, 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
,

67 "%†occur†îr‹ duêtÿÆloˇã (*µ_c⁄èöî)->sig«»Áûd", 
__func__
);

68 
	`ªe_£t
((*
µ_c⁄èöî
)->
sig«l
, 0, (
m©_sig_t
)*
sig«l_num
);

70 
uöt32_t
 
i
=0; i<
sig«l_num
; i++)

72 
	`ªe_log
(
SIGNAL_LOG
, "%†sig«»ödex i %d", 
__func__
, 
i
);

73 
	`ªe_check_nuŒ_exô_ªtvÆ
(&((*
µ_c⁄èöî
)->
sig«l
[
i
]), 
ªtvÆ
, 
ECG_SEG_ALLOC_FAILED
, 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
,

74 "%†occur†îr‹ duêtÿ(*µ_c⁄èöî)->sig«l[i] i†NULL", 
__func__
);

75 
	`m©_sig_c⁄°ru˘‹_Â
(
p_∑ø
, &(*
µ_c⁄èöî
)->
sig«l
[
i
], 
FALSE
);

77 
EXIT_SIGNAL_CONTAINER_CONSTRUCTOR
:

78 
SIGNAL_FUNC_EXIT
;

79  
ªtvÆ
;

80 
	}
}

82 
	$sig«l_c⁄èöî_de°ru˘‹
(
sig«l_c⁄èöî_t
 *
p_c⁄èöî
)

84 
SIGNAL_FUNC_ENTRANCE
;

85 i‡(
p_c⁄èöî
->
sig«l
)

87 
uöt32_t
 
i
 = 0; i<
p_c⁄èöî
->
sig«l_num
; i++)

89 
	`m©_sig_de°ru˘‹
(&(
p_c⁄èöî
->
sig«l
[
i
]));

92 
	`ªe_‰ì
(
p_c⁄èöî
->
sig«l
);

93 
SIGNAL_FUNC_EXIT
;

94 
	}
}

	@util/inc/arm_typedef.h

1 #i‚de‡
__ARM_TYPEDEF_H__


2 
	#__ARM_TYPEDEF_H__


	)

4 
	#BOOL
 

	)

5 
	#TRUE
 (1)

	)

6 
	#FALSE
 (0)

	)

	@util/inc/arm_util.h

1 
	~<™droid/log.h
>

2 
	~<¨m_√⁄.h
>

3 #i‚de‡
__ARM_UTIL_H__


4 
	#__ARM_UTIL_H__


	)

6 
	eLOG_LEVEL
 {

7 
	mLOG_VERBOSE
 = 2,

8 
	mLOG_DEBUG
 = 3,

9 
	mLOG_INFO
 = 4,

10 
	mLOG_WARN
 = 5,

11 
	mLOG_ERROR
 = 6,

12 } 
	tLOG_LEVEL_T
;

14 
	#DEFAULT_LOG_LEVEL
 (
LOG_DEBUG
)

	)

16 #ifde‡
__DEBUG__


18 
	#ªe_log
(
LOG_LEVEL
, 
x
...) \

20 i‡(
LOG_LEVEL
 >
DEFAULT_LOG_LEVEL
) { \

21 
LOG_LEVEL
) { \

22 
LOG_VERBOSE
: \

23 
	`__™droid_log_¥öt
(
ANDROID_LOG_WARN
, "ANDROID_IPP", 
x
); \

25 
LOG_DEBUG
: \

26 
	`__™droid_log_¥öt
(
ANDROID_LOG_DEBUG
, "ANRDOID_IPP", 
x
); \

28 
LOG_INFO
: \

29 
	`__™droid_log_¥öt
(
ANDROID_LOG_INFO
, "ANDROID_IPP", 
x
); \

31 
LOG_WARN
: \

32 
	`__™droid_log_¥öt
(
ANDROID_LOG_WARN
, "ANDROID_IPP", 
x
); \

34 
LOG_ERROR
: \

35 
	`__™droid_log_¥öt
(
ANDROID_LOG_ERROR
, "ANRDOID_IPP", 
x
); \

38 
	`¥ötf
(
x
); \

39 
	`¥ötf
("\n"); \

41 }

	)

43 
	#FUNC_ENTRANCE_LOG
 
	`ªe_log
(
LOG_DEBUG
, "%†íãrs", 
__func__
);

	)

44 
	#FUNC_EXIT_LOG
 
	`ªe_log
(
LOG_DEBUG
, "%†Àaves", 
__func__
);

	)

45 
	#ªe_¥ötf
(
LOG_LEVEL
, 
x
...) \

47 i‡(
LOG_LEVEL
 >
DEFAULT_LOG_LEVEL
) { \

48 
	`¥ötf
(
x
); \

50 }

	)

52 
	#ªe_log
(
LOG_LEVEL
, 
x
...Ëdÿ{} 0)

	)

53 
	#FUNC_ENTANGE_LOG
 dÿ{} 0)

	)

54 
	#FUNC_EXIT_LOG
 dÿ{} 0)

	)

55 
	#ªe_¥ötf
(
LOG_LEVEL
, 
x
...Ëdÿ{} 0)

	)

58 #i‚de‡
NULL


59 
	#NULL
 ((*)0)

	)

61 
	#ªe_mÆloc
(
size
Ë
	`mÆloc
(size)

	)

62 
	#ªe_£t
(
d°
, 
vÆue
, 
size
Ë
	`mem£t
(d°, vÆue, size)

	)

63 
	#ªe_˝y
(
d°
, 
§c
, 
size
Ë
	`mem˝y
(d°, src, size)

	)

64 
	#ªe_‰ì
(
§c
) \

66 i‡(
§c
) \

68 
	`‰ì
(
§c
); \

69 
§c
 = 
NULL
; \

71 }

	)

73 
	#ªe_f›í
(
fûe_«me
, 
mode
Ë
	`f›í
(fûe_«me, mode)

	)

74 
	#ªe_f˛o£
(
§c_fûe
) \

76 i‡(
§c_fûe
) \

78 
	`f˛o£
(
§c_fûe
); \

79 
§c_fûe
 = 
NULL
; \

81 }

	)

83 
	#ªe_check_f›í
(
fûe_±r
, 
fûe_«me
, 
mode
, 
EXIT_TAG
) \

85 
fûe_±r
 = 
	`ªe_f›í
(
fûe_«me
, 
mode
); \

86 i‡(!
fûe_±r
) \

88 
	`ªe_log
(
LOG_ERROR
, "%†ˇn'à›í %s", 
__func__
, 
fûe_«me
); \

89 
EXIT_TAG
; \

91 }

	)

93 
	#ªe_fûe_size
(
fûe_size
, 
fûe_±r
) \

95 
	`f£ek
(
fûe_±r
, 0L, 
SEEK_END
); \

96 
fûe_size
 = (
size_t
)
	`·ñl
(
fûe_±r
); \

97 
	`ªe_log
(
LOG_DEBUG
, "%†FILE'†sizêi†%zu", 
__func__
, 
fûe_size
); \

98 
	`ªe_f˛o£
(
fûe_±r
); \

99 }

	)

101 
	#ªe_fûe_ªad
(
fûe_±r
, 
p_buf„r
, 
fûe_size
, 
ªad_size
) \

103 
ªad_size
 = 
	`‰ód
(
p_buf„r
, (), 
fûe_size
, 
fûe_±r
); \

104 
	`ªe_f˛o£
(
fûe_±r
); \

105 
	`ªe_log
(
LOG_DEBUG
, "%†ªad_sizêi†%zu", 
__func__
, 
ªad_size
); \

106 }

	)

108 
	#ªe_fûe_wrôe
(
fûe_±r
, 
p_buf„r
, 
fûe_«me
, 
fûe_size
) \

110 i‡(
fûe_±r
 && 
p_buf„r
) \

112 
	`ªe_log
(
LOG_DEBUG
, "%†ßve†%s", 
__func__
, 
fûe_«me
); \

113 
	`fwrôe
(
p_buf„r
, (
uöt8_t
), 
fûe_size
, 
fûe_±r
); \

114 
	`ªe_f˛o£
(
fûe_±r
); \

117 
	`ªe_log
(
LOG_ERROR
, "%†¥ï¨e†tÿßvê%†Áûed", 
__func__
, 
fûe_«me
); \

119 }

	)

121 
	#ªe_check_nuŒ_exô
(
±r
, 
EXIT_LABEL
, 
ERROR_LOG
, ...) \

123 i‡(!
±r
) { \

124 
	`ªe_log
(
LOG_ERROR
, 
ERROR_LOG
, ##
__VA_ARGS__
); \

125 
EXIT_LABEL
; \

127 }

	)

129 
	#ªe_check_nuŒ_exô_ªtvÆ
(
±r
, 
ªtvÆ
, 
RET_CODE
, 
EXIT_LABEL
, 
ERROR_LOG
, ...) \

131 i‡(!
±r
) { \

132 
ªtvÆ
 = 
RET_CODE
; \

133 
	`ªe_log
(
LOG_ERROR
, 
ERROR_LOG
, ##
__VA_ARGS__
); \

134 
EXIT_LABEL
; \

136 }

	)

138 
	#ªe_check_åue_exô
(
check_v
, 
EXIT_LABEL
, 
ERROR_LOG
, ...) \

140 i‡(
check_v
) { \

141 
	`ªe_log
(
LOG_ERROR
, 
ERROR_LOG
, ##
__VA_ARGS__
); \

142 
EXIT_LABEL
; \

144 }

	)

146 
	#ªe_check_åue_exô_ªtvÆ
(
check_v
, 
ªtv
, 
RET_CODE
, 
EXIT_LABEL
, 
ERROR_LOG
, ...) \

148 i‡(
check_v
) { \

149 
ªtvÆ
 = 
RET_CODE
; \

150 
	`ªe_log
(
LOG_ERROR
, 
ERROR_LOG
, ##
__VA_ARGS__
); \

151 
EXIT_LABEL
; \

153 }

	)

155 
	#REE_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

157 
now_ns
();

158 
ªe_dbg_√⁄_u32x4_t
(
uöt32x4_t
 
vec_dbg
);

159 
ªe_dbg_√⁄_u32x4x4_t
(
uöt32x4x4_t
 
vec_dbg
);

160 
ªe_dbg_√⁄_Â32x2_t
(
Êﬂt32x2_t
 
vec_dbg
);

161 
ªe_dbg_√⁄_Â32x4_t
(
Êﬂt32x4_t
 
vec_dbg
);

162 
ªe_dbg_√⁄_Â32x4x4_t
(
Êﬂt32x4x4_t
 
vec_dbg
);

	@util/inc/ecg_response_def.h

1 #i‚de‡
__ECG_SEG_RESPONSE_DEF_H__


2 
	#__ECG_SEG_RESPONSE_DEF_H__


	)

4 
	eecg_£g_ªs
 {

5 
	mECG_SEG_OK
 = 0,

6 
	mECG_SEG_INVALID_PARAM
 = 1,

7 
	mECG_SEG_ALLOC_FAILED
 = 2,

8 } 
	tecg_£g_ªs_t
;

	@util/inc/ecg_seg_util.h

1 #i‚de‡
__ECG_SEG_UTIL_H__


2 
	#__ECG_SEG_UTIL_H__


	)

4 
	#ECG_SEG_PATH_MAX
 (256)

	)

	@util/src/arm_util.c

1 
	~<°dio.h
>

2 
	~<time.h
>

3 
	~<¨m_√⁄.h
>

4 
	~"¨m_utû.h
"

6 
	$now_ns
()

8 
time•ec
 
ªs
;

9 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ªs
);

10  1000.0*
ªs
.
tv_£c
 + (Ïes.
tv_n£c
/1e6;

11 
	}
}

13 
	$ªe_dbg_√⁄_u32x4_t
(
uöt32x4_t
 
vec_dbg
)

15 
uöt32_t
 
dbg_buf
[4] = {0};

16 
	`v°1q_u32
(
dbg_buf
, 
vec_dbg
);

17 
	`ªe_log
(
LOG_DEBUG
, "%04d %04d %04d %04d", 
dbg_buf
[0], dbg_buf[1], dbg_buf[2], dbg_buf[3]);

18 
	}
}

20 
	$ªe_dbg_√⁄_u32x4x4_t
(
uöt32x4x4_t
 
vec_dbg
)

22 
uöt32_t
 
dbg_buf
[16] = {0};

23 
	`v°4q_u32
(
dbg_buf
, 
vec_dbg
);

24 
	`ªe_log
(
LOG_DEBUG
, "%04d %04d %04d %04d", 
dbg_buf
[0], dbg_buf[1], dbg_buf[2], dbg_buf[3]);

25 
	`ªe_log
(
LOG_DEBUG
, "%04d %04d %04d %04d", 
dbg_buf
[4], dbg_buf[5], dbg_buf[6], dbg_buf[7]);

26 
	`ªe_log
(
LOG_DEBUG
, "%04d %04d %04d %04d", 
dbg_buf
[8], dbg_buf[9], dbg_buf[10], dbg_buf[11]);

27 
	`ªe_log
(
LOG_DEBUG
, "%04d %04d %04d %04d", 
dbg_buf
[12], dbg_buf[13], dbg_buf[14], dbg_buf[15]);

28 
	}
}

30 
	$ªe_dbg_√⁄_Â32x2_t
(
Êﬂt32x2_t
 
vec_dbg
)

32 
dbg_buf
[2] = {0.0};

33 
	`v°1_f32
(
dbg_buf
, 
vec_dbg
);

34 
	`ªe_log
(
LOG_DEBUG
, "%03.3‡%03.3f", 
dbg_buf
[0], dbg_buf[1]);

35 
	}
}

37 
	$ªe_dbg_√⁄_Â32x4_t
(
Êﬂt32x4_t
 
vec_dbg
)

39 
dbg_buf
[4] = {0.0};

40 
	`v°1q_f32
(
dbg_buf
, 
vec_dbg
);

41 
	`ªe_log
(
LOG_DEBUG
, "%03.3‡%03.3‡%03.3‡%03.3f", 
dbg_buf
[0], dbg_buf[1], dbg_buf[2], dbg_buf[3]);

42 
	}
}

44 
	$ªe_dbg_√⁄_Â32x4x4_t
(
Êﬂt32x4x4_t
 
vec_dbg
)

46 
dbg_buf
[16] = {0.0};

47 
	`v°4q_f32
(
dbg_buf
, 
vec_dbg
);

48 
	`ªe_log
(
LOG_DEBUG
, "%1.1‡%1.1‡%1.1‡%1.1f", 
dbg_buf
[0], dbg_buf[1], dbg_buf[2], dbg_buf[3]);

49 
	`ªe_log
(
LOG_DEBUG
, "%1.1‡%1.1‡%1.1‡%1.1f", 
dbg_buf
[4], dbg_buf[5], dbg_buf[6], dbg_buf[7]);

50 
	`ªe_log
(
LOG_DEBUG
, "%1.1‡%1.1‡%1.1‡%1.1f", 
dbg_buf
[8], dbg_buf[9], dbg_buf[10], dbg_buf[11]);

51 
	`ªe_log
(
LOG_DEBUG
, "%1.1‡%1.1‡%1.1‡%1.1f", 
dbg_buf
[12], dbg_buf[13], dbg_buf[14], dbg_buf[15]);

52 
	}
}

	@
1
.
0
18
378
inc/ecg_seg_def.h
inc/ecg_seg_gemm.h
inc/ecg_seg_graph.h
inc/ecg_seg_matrix.h
inc/ecg_seg_model.h
inc/ecg_seg_sig2col.h
inc/ecg_seg_signal.h
src/ecg_seg_gemm.c
src/ecg_seg_main.c
src/ecg_seg_matrix.c
src/ecg_seg_model.c
src/ecg_seg_sig2col.c
src/ecg_seg_signal.c
util/inc/arm_typedef.h
util/inc/arm_util.h
util/inc/ecg_response_def.h
util/inc/ecg_seg_util.h
util/src/arm_util.c
